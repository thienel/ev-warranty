// <auto-generated />
using System;
using Backend.Dotnet.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Backend.Dotnet.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251029162942_RemoveStatusFromPartCategory")]
    partial class RemoveStatusFromPartCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("deleted_at IS NULL");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("OfficeLocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("office_location_id");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("part_name");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("serial_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Available")
                        .HasColumnName("status");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_parts_category_id");

                    b.HasIndex("OfficeLocationId")
                        .HasDatabaseName("ix_parts_office_location_id");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_parts_serial_number");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_parts_status");

                    b.HasIndex("CategoryId", "Status")
                        .HasDatabaseName("ix_parts_category_status");

                    b.ToTable("parts", (string)null);
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.PartCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("parent_category_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique()
                        .HasDatabaseName("ix_part_categories_category_name");

                    b.HasIndex("ParentCategoryId")
                        .HasDatabaseName("ix_part_categories_parent_category_id");

                    b.ToTable("part_categories", (string)null);
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.PolicyCoveragePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("CoverageConditions")
                        .HasColumnType("text")
                        .HasColumnName("coverage_conditions");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PartCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("part_category_id");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("policy_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("PartCategoryId")
                        .HasDatabaseName("ix_policy_coverage_parts_part_category_id");

                    b.HasIndex("PolicyId")
                        .HasDatabaseName("ix_policy_coverage_parts_policy_id");

                    b.HasIndex("PolicyId", "PartCategoryId")
                        .IsUnique()
                        .HasDatabaseName("ix_policy_coverage_parts_policy_category_unique");

                    b.ToTable("policy_coverage_parts", (string)null);
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("deleted_at");

                    b.Property<string>("LicensePlate")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("license_plate");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("model_id");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("date")
                        .HasColumnName("purchase_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("varchar(17)")
                        .HasColumnName("vin");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_vehicles_customer_id");

                    b.HasIndex("DeletedAt");

                    b.HasIndex("LicensePlate")
                        .HasDatabaseName("ix_vehicles_license_plate");

                    b.HasIndex("ModelId")
                        .HasDatabaseName("ix_vehicles_model_id");

                    b.HasIndex("Vin")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicles_vin");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.VehicleModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("brand");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("model_name");

                    b.Property<Guid?>("PolicyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("policy_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId")
                        .HasDatabaseName("ix_vehicle_models_policy_id");

                    b.HasIndex("Brand", "ModelName", "Year")
                        .IsUnique()
                        .HasDatabaseName("ix_vehicle_models_brand_model_year");

                    b.ToTable("vehicle_models", (string)null);
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.WarrantyPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<int?>("KilometerLimit")
                        .HasColumnType("int")
                        .HasColumnName("kilometer_limit");

                    b.Property<string>("PolicyName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("policy_name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Draft")
                        .HasColumnName("status");

                    b.Property<string>("TermsAndConditions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("terms_and_conditions");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<int>("WarrantyDurationMonths")
                        .HasColumnType("int")
                        .HasColumnName("warranty_duration_months");

                    b.HasKey("Id");

                    b.HasIndex("PolicyName")
                        .HasDatabaseName("ix_warranty_policies_policy_name");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_warranty_policies_status");

                    b.ToTable("warranty_policies", (string)null);
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.Part", b =>
                {
                    b.HasOne("Backend.Dotnet.Domain.Entities.PartCategory", "Category")
                        .WithMany("Parts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.PartCategory", b =>
                {
                    b.HasOne("Backend.Dotnet.Domain.Entities.PartCategory", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.PolicyCoveragePart", b =>
                {
                    b.HasOne("Backend.Dotnet.Domain.Entities.PartCategory", "PartCategory")
                        .WithMany("PolicyCoverageParts")
                        .HasForeignKey("PartCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Dotnet.Domain.Entities.WarrantyPolicy", "Policy")
                        .WithMany("CoverageParts")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PartCategory");

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.Vehicle", b =>
                {
                    b.HasOne("Backend.Dotnet.Domain.Entities.Customer", "Customer")
                        .WithMany("Vehicles")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Backend.Dotnet.Domain.Entities.VehicleModel", "Model")
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.VehicleModel", b =>
                {
                    b.HasOne("Backend.Dotnet.Domain.Entities.WarrantyPolicy", "Policy")
                        .WithMany("VehicleModels")
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.PartCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Parts");

                    b.Navigation("PolicyCoverageParts");
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Backend.Dotnet.Domain.Entities.WarrantyPolicy", b =>
                {
                    b.Navigation("CoverageParts");

                    b.Navigation("VehicleModels");
                });
#pragma warning restore 612, 618
        }
    }
}
