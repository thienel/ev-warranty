name: CD Pipeline

on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-go: ${{ steps.filter.outputs.backend-go }}
      backend-dotnet: ${{ steps.filter.outputs.backend-dotnet }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend-go:
              - 'backend-go/**'
            backend-dotnet:
              - 'backend-dotnet/**'
            frontend:
              - 'frontend/**'

  build-backend-go:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-go == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate version
        id: version
        run: echo "VERSION=$(date +%Y%m%d)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build & Push Go Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend-go
          push: true
          tags: |
            lethiendev/ev-warranty-go:latest
            lethiendev/ev-warranty-go:${{ steps.version.outputs.VERSION }}
          cache-from: type=registry,ref=lethiendev/ev-warranty-go:buildcache
          cache-to: type=registry,ref=lethiendev/ev-warranty-go:buildcache,mode=max

  build-backend-dotnet:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-dotnet == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate version
        id: version
        run: echo "VERSION=$(date +%Y%m%d)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build & Push .NET Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend-dotnet
          push: true
          tags: |
            lethiendev/ev-warranty-dotnet:latest
            lethiendev/ev-warranty-dotnet:${{ steps.version.outputs.VERSION }}
          cache-from: type=registry,ref=lethiendev/ev-warranty-dotnet:buildcache
          cache-to: type=registry,ref=lethiendev/ev-warranty-dotnet:buildcache,mode=max
  build-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Generate version
        id: version
        run: echo "VERSION=$(date +%Y%m%d)-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build & Push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: |
            lethiendev/ev-warranty-frontend:latest
            lethiendev/ev-warranty-frontend:${{ steps.version.outputs.VERSION }}
          cache-from: type=registry,ref=lethiendev/ev-warranty-frontend:buildcache
          cache-to: type=registry,ref=lethiendev/ev-warranty-frontend:buildcache,mode=max
          build-args: |
            VITE_API_URL=https://${{ secrets.EC2_HOST }}

  deploy-aws-ec2:
    needs: [build-backend-go, build-backend-dotnet, build-frontend]
    if: |
      always() &&
      (needs.build-backend-go.result == 'success' || 
       needs.build-backend-dotnet.result == 'success' ||
       needs.build-frontend.result == 'success' ||
       (needs.build-backend-go.result == 'skipped' && 
        needs.build-backend-dotnet.result == 'skipped' &&
        needs.build-frontend.result == 'skipped'))
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          envs: ENV_FILE
          script: |
            cd ~/ev-warranty
            
            git fetch origin
            git reset --hard origin/main
            
            echo "$ENV_FILE" > .env
            chmod 600 .env
            
            docker compose pull
            docker compose up -d --remove-orphans
            sleep 5
            docker compose logs --tail=100
            docker compose ps
            docker image prune -af
