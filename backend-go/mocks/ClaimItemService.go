// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	application "ev-warranty-go/internal/application"

	entities "ev-warranty-go/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	services "ev-warranty-go/internal/application/services"

	uuid "github.com/google/uuid"
)

// ClaimItemService is an autogenerated mock type for the ClaimItemService type
type ClaimItemService struct {
	mock.Mock
}

type ClaimItemService_Expecter struct {
	mock *mock.Mock
}

func (_m *ClaimItemService) EXPECT() *ClaimItemService_Expecter {
	return &ClaimItemService_Expecter{mock: &_m.Mock}
}

// Approve provides a mock function with given fields: tx, claimID, itemID
func (_m *ClaimItemService) Approve(tx application.Tx, claimID uuid.UUID, itemID uuid.UUID) error {
	ret := _m.Called(tx, claimID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for Approve")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(tx, claimID, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClaimItemService_Approve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Approve'
type ClaimItemService_Approve_Call struct {
	*mock.Call
}

// Approve is a helper method to define mock.On call
//   - tx application.Tx
//   - claimID uuid.UUID
//   - itemID uuid.UUID
func (_e *ClaimItemService_Expecter) Approve(tx interface{}, claimID interface{}, itemID interface{}) *ClaimItemService_Approve_Call {
	return &ClaimItemService_Approve_Call{Call: _e.mock.On("Approve", tx, claimID, itemID)}
}

func (_c *ClaimItemService_Approve_Call) Run(run func(tx application.Tx, claimID uuid.UUID, itemID uuid.UUID)) *ClaimItemService_Approve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(application.Tx), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *ClaimItemService_Approve_Call) Return(_a0 error) *ClaimItemService_Approve_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClaimItemService_Approve_Call) RunAndReturn(run func(application.Tx, uuid.UUID, uuid.UUID) error) *ClaimItemService_Approve_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, claimID, cmd
func (_m *ClaimItemService) Create(tx application.Tx, claimID uuid.UUID, cmd *services.CreateClaimItemCommand) (*entities.ClaimItem, error) {
	ret := _m.Called(tx, claimID, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.ClaimItem
	var r1 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, *services.CreateClaimItemCommand) (*entities.ClaimItem, error)); ok {
		return rf(tx, claimID, cmd)
	}
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, *services.CreateClaimItemCommand) *entities.ClaimItem); ok {
		r0 = rf(tx, claimID, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ClaimItem)
		}
	}

	if rf, ok := ret.Get(1).(func(application.Tx, uuid.UUID, *services.CreateClaimItemCommand) error); ok {
		r1 = rf(tx, claimID, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimItemService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ClaimItemService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx application.Tx
//   - claimID uuid.UUID
//   - cmd *services.CreateClaimItemCommand
func (_e *ClaimItemService_Expecter) Create(tx interface{}, claimID interface{}, cmd interface{}) *ClaimItemService_Create_Call {
	return &ClaimItemService_Create_Call{Call: _e.mock.On("Create", tx, claimID, cmd)}
}

func (_c *ClaimItemService_Create_Call) Run(run func(tx application.Tx, claimID uuid.UUID, cmd *services.CreateClaimItemCommand)) *ClaimItemService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(application.Tx), args[1].(uuid.UUID), args[2].(*services.CreateClaimItemCommand))
	})
	return _c
}

func (_c *ClaimItemService_Create_Call) Return(_a0 *entities.ClaimItem, _a1 error) *ClaimItemService_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClaimItemService_Create_Call) RunAndReturn(run func(application.Tx, uuid.UUID, *services.CreateClaimItemCommand) (*entities.ClaimItem, error)) *ClaimItemService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetByClaimID provides a mock function with given fields: ctx, claimID
func (_m *ClaimItemService) GetByClaimID(ctx context.Context, claimID uuid.UUID) ([]*entities.ClaimItem, error) {
	ret := _m.Called(ctx, claimID)

	if len(ret) == 0 {
		panic("no return value specified for GetByClaimID")
	}

	var r0 []*entities.ClaimItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entities.ClaimItem, error)); ok {
		return rf(ctx, claimID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entities.ClaimItem); ok {
		r0 = rf(ctx, claimID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ClaimItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, claimID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimItemService_GetByClaimID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByClaimID'
type ClaimItemService_GetByClaimID_Call struct {
	*mock.Call
}

// GetByClaimID is a helper method to define mock.On call
//   - ctx context.Context
//   - claimID uuid.UUID
func (_e *ClaimItemService_Expecter) GetByClaimID(ctx interface{}, claimID interface{}) *ClaimItemService_GetByClaimID_Call {
	return &ClaimItemService_GetByClaimID_Call{Call: _e.mock.On("GetByClaimID", ctx, claimID)}
}

func (_c *ClaimItemService_GetByClaimID_Call) Run(run func(ctx context.Context, claimID uuid.UUID)) *ClaimItemService_GetByClaimID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ClaimItemService_GetByClaimID_Call) Return(_a0 []*entities.ClaimItem, _a1 error) *ClaimItemService_GetByClaimID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClaimItemService_GetByClaimID_Call) RunAndReturn(run func(context.Context, uuid.UUID) ([]*entities.ClaimItem, error)) *ClaimItemService_GetByClaimID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ClaimItemService) GetByID(ctx context.Context, id uuid.UUID) (*entities.ClaimItem, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.ClaimItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.ClaimItem, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.ClaimItem); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ClaimItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimItemService_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ClaimItemService_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ClaimItemService_Expecter) GetByID(ctx interface{}, id interface{}) *ClaimItemService_GetByID_Call {
	return &ClaimItemService_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *ClaimItemService_GetByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ClaimItemService_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ClaimItemService_GetByID_Call) Return(_a0 *entities.ClaimItem, _a1 error) *ClaimItemService_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ClaimItemService_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*entities.ClaimItem, error)) *ClaimItemService_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// HardDelete provides a mock function with given fields: tx, claimID, itemID
func (_m *ClaimItemService) HardDelete(tx application.Tx, claimID uuid.UUID, itemID uuid.UUID) error {
	ret := _m.Called(tx, claimID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for HardDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(tx, claimID, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClaimItemService_HardDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HardDelete'
type ClaimItemService_HardDelete_Call struct {
	*mock.Call
}

// HardDelete is a helper method to define mock.On call
//   - tx application.Tx
//   - claimID uuid.UUID
//   - itemID uuid.UUID
func (_e *ClaimItemService_Expecter) HardDelete(tx interface{}, claimID interface{}, itemID interface{}) *ClaimItemService_HardDelete_Call {
	return &ClaimItemService_HardDelete_Call{Call: _e.mock.On("HardDelete", tx, claimID, itemID)}
}

func (_c *ClaimItemService_HardDelete_Call) Run(run func(tx application.Tx, claimID uuid.UUID, itemID uuid.UUID)) *ClaimItemService_HardDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(application.Tx), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *ClaimItemService_HardDelete_Call) Return(_a0 error) *ClaimItemService_HardDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClaimItemService_HardDelete_Call) RunAndReturn(run func(application.Tx, uuid.UUID, uuid.UUID) error) *ClaimItemService_HardDelete_Call {
	_c.Call.Return(run)
	return _c
}

// Reject provides a mock function with given fields: tx, claimID, itemID
func (_m *ClaimItemService) Reject(tx application.Tx, claimID uuid.UUID, itemID uuid.UUID) error {
	ret := _m.Called(tx, claimID, itemID)

	if len(ret) == 0 {
		panic("no return value specified for Reject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(tx, claimID, itemID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClaimItemService_Reject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reject'
type ClaimItemService_Reject_Call struct {
	*mock.Call
}

// Reject is a helper method to define mock.On call
//   - tx application.Tx
//   - claimID uuid.UUID
//   - itemID uuid.UUID
func (_e *ClaimItemService_Expecter) Reject(tx interface{}, claimID interface{}, itemID interface{}) *ClaimItemService_Reject_Call {
	return &ClaimItemService_Reject_Call{Call: _e.mock.On("Reject", tx, claimID, itemID)}
}

func (_c *ClaimItemService_Reject_Call) Run(run func(tx application.Tx, claimID uuid.UUID, itemID uuid.UUID)) *ClaimItemService_Reject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(application.Tx), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *ClaimItemService_Reject_Call) Return(_a0 error) *ClaimItemService_Reject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClaimItemService_Reject_Call) RunAndReturn(run func(application.Tx, uuid.UUID, uuid.UUID) error) *ClaimItemService_Reject_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: tx, claimID, itemID, cmd
func (_m *ClaimItemService) Update(tx application.Tx, claimID uuid.UUID, itemID uuid.UUID, cmd *services.UpdateClaimItemCommand) error {
	ret := _m.Called(tx, claimID, itemID, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, uuid.UUID, *services.UpdateClaimItemCommand) error); ok {
		r0 = rf(tx, claimID, itemID, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClaimItemService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ClaimItemService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - tx application.Tx
//   - claimID uuid.UUID
//   - itemID uuid.UUID
//   - cmd *services.UpdateClaimItemCommand
func (_e *ClaimItemService_Expecter) Update(tx interface{}, claimID interface{}, itemID interface{}, cmd interface{}) *ClaimItemService_Update_Call {
	return &ClaimItemService_Update_Call{Call: _e.mock.On("Update", tx, claimID, itemID, cmd)}
}

func (_c *ClaimItemService_Update_Call) Run(run func(tx application.Tx, claimID uuid.UUID, itemID uuid.UUID, cmd *services.UpdateClaimItemCommand)) *ClaimItemService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(application.Tx), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(*services.UpdateClaimItemCommand))
	})
	return _c
}

func (_c *ClaimItemService_Update_Call) Return(_a0 error) *ClaimItemService_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ClaimItemService_Update_Call) RunAndReturn(run func(application.Tx, uuid.UUID, uuid.UUID, *services.UpdateClaimItemCommand) error) *ClaimItemService_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewClaimItemService creates a new instance of ClaimItemService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClaimItemService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClaimItemService {
	mock := &ClaimItemService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
