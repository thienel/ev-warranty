// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// ClaimItemHandler is an autogenerated mock type for the ClaimItemHandler type
type ClaimItemHandler struct {
	mock.Mock
}

type ClaimItemHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *ClaimItemHandler) EXPECT() *ClaimItemHandler_Expecter {
	return &ClaimItemHandler_Expecter{mock: &_m.Mock}
}

// Approve provides a mock function with given fields: c
func (_m *ClaimItemHandler) Approve(c *gin.Context) {
	_m.Called(c)
}

// ClaimItemHandler_Approve_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Approve'
type ClaimItemHandler_Approve_Call struct {
	*mock.Call
}

// Approve is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimItemHandler_Expecter) Approve(c interface{}) *ClaimItemHandler_Approve_Call {
	return &ClaimItemHandler_Approve_Call{Call: _e.mock.On("Approve", c)}
}

func (_c *ClaimItemHandler_Approve_Call) Run(run func(c *gin.Context)) *ClaimItemHandler_Approve_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimItemHandler_Approve_Call) Return() *ClaimItemHandler_Approve_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimItemHandler_Approve_Call) RunAndReturn(run func(*gin.Context)) *ClaimItemHandler_Approve_Call {
	_c.Run(run)
	return _c
}

// Create provides a mock function with given fields: c
func (_m *ClaimItemHandler) Create(c *gin.Context) {
	_m.Called(c)
}

// ClaimItemHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ClaimItemHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimItemHandler_Expecter) Create(c interface{}) *ClaimItemHandler_Create_Call {
	return &ClaimItemHandler_Create_Call{Call: _e.mock.On("Create", c)}
}

func (_c *ClaimItemHandler_Create_Call) Run(run func(c *gin.Context)) *ClaimItemHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimItemHandler_Create_Call) Return() *ClaimItemHandler_Create_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimItemHandler_Create_Call) RunAndReturn(run func(*gin.Context)) *ClaimItemHandler_Create_Call {
	_c.Run(run)
	return _c
}

// Delete provides a mock function with given fields: c
func (_m *ClaimItemHandler) Delete(c *gin.Context) {
	_m.Called(c)
}

// ClaimItemHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ClaimItemHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimItemHandler_Expecter) Delete(c interface{}) *ClaimItemHandler_Delete_Call {
	return &ClaimItemHandler_Delete_Call{Call: _e.mock.On("Delete", c)}
}

func (_c *ClaimItemHandler_Delete_Call) Run(run func(c *gin.Context)) *ClaimItemHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimItemHandler_Delete_Call) Return() *ClaimItemHandler_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimItemHandler_Delete_Call) RunAndReturn(run func(*gin.Context)) *ClaimItemHandler_Delete_Call {
	_c.Run(run)
	return _c
}

// GetByClaimID provides a mock function with given fields: c
func (_m *ClaimItemHandler) GetByClaimID(c *gin.Context) {
	_m.Called(c)
}

// ClaimItemHandler_GetByClaimID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByClaimID'
type ClaimItemHandler_GetByClaimID_Call struct {
	*mock.Call
}

// GetByClaimID is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimItemHandler_Expecter) GetByClaimID(c interface{}) *ClaimItemHandler_GetByClaimID_Call {
	return &ClaimItemHandler_GetByClaimID_Call{Call: _e.mock.On("GetByClaimID", c)}
}

func (_c *ClaimItemHandler_GetByClaimID_Call) Run(run func(c *gin.Context)) *ClaimItemHandler_GetByClaimID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimItemHandler_GetByClaimID_Call) Return() *ClaimItemHandler_GetByClaimID_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimItemHandler_GetByClaimID_Call) RunAndReturn(run func(*gin.Context)) *ClaimItemHandler_GetByClaimID_Call {
	_c.Run(run)
	return _c
}

// GetByID provides a mock function with given fields: c
func (_m *ClaimItemHandler) GetByID(c *gin.Context) {
	_m.Called(c)
}

// ClaimItemHandler_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ClaimItemHandler_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimItemHandler_Expecter) GetByID(c interface{}) *ClaimItemHandler_GetByID_Call {
	return &ClaimItemHandler_GetByID_Call{Call: _e.mock.On("GetByID", c)}
}

func (_c *ClaimItemHandler_GetByID_Call) Run(run func(c *gin.Context)) *ClaimItemHandler_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimItemHandler_GetByID_Call) Return() *ClaimItemHandler_GetByID_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimItemHandler_GetByID_Call) RunAndReturn(run func(*gin.Context)) *ClaimItemHandler_GetByID_Call {
	_c.Run(run)
	return _c
}

// Reject provides a mock function with given fields: c
func (_m *ClaimItemHandler) Reject(c *gin.Context) {
	_m.Called(c)
}

// ClaimItemHandler_Reject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reject'
type ClaimItemHandler_Reject_Call struct {
	*mock.Call
}

// Reject is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimItemHandler_Expecter) Reject(c interface{}) *ClaimItemHandler_Reject_Call {
	return &ClaimItemHandler_Reject_Call{Call: _e.mock.On("Reject", c)}
}

func (_c *ClaimItemHandler_Reject_Call) Run(run func(c *gin.Context)) *ClaimItemHandler_Reject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimItemHandler_Reject_Call) Return() *ClaimItemHandler_Reject_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimItemHandler_Reject_Call) RunAndReturn(run func(*gin.Context)) *ClaimItemHandler_Reject_Call {
	_c.Run(run)
	return _c
}

// NewClaimItemHandler creates a new instance of ClaimItemHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClaimItemHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClaimItemHandler {
	mock := &ClaimItemHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
