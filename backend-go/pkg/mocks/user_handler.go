// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// UserHandler is an autogenerated mock type for the UserHandler type
type UserHandler struct {
	mock.Mock
}

type UserHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *UserHandler) EXPECT() *UserHandler_Expecter {
	return &UserHandler_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: c
func (_m *UserHandler) Create(c *gin.Context) {
	_m.Called(c)
}

// UserHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type UserHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - c *gin.Context
func (_e *UserHandler_Expecter) Create(c interface{}) *UserHandler_Create_Call {
	return &UserHandler_Create_Call{Call: _e.mock.On("Create", c)}
}

func (_c *UserHandler_Create_Call) Run(run func(c *gin.Context)) *UserHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *UserHandler_Create_Call) Return() *UserHandler_Create_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserHandler_Create_Call) RunAndReturn(run func(*gin.Context)) *UserHandler_Create_Call {
	_c.Run(run)
	return _c
}

// Delete provides a mock function with given fields: c
func (_m *UserHandler) Delete(c *gin.Context) {
	_m.Called(c)
}

// UserHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type UserHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - c *gin.Context
func (_e *UserHandler_Expecter) Delete(c interface{}) *UserHandler_Delete_Call {
	return &UserHandler_Delete_Call{Call: _e.mock.On("Delete", c)}
}

func (_c *UserHandler_Delete_Call) Run(run func(c *gin.Context)) *UserHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *UserHandler_Delete_Call) Return() *UserHandler_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserHandler_Delete_Call) RunAndReturn(run func(*gin.Context)) *UserHandler_Delete_Call {
	_c.Run(run)
	return _c
}

// GetAll provides a mock function with given fields: c
func (_m *UserHandler) GetAll(c *gin.Context) {
	_m.Called(c)
}

// UserHandler_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type UserHandler_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - c *gin.Context
func (_e *UserHandler_Expecter) GetAll(c interface{}) *UserHandler_GetAll_Call {
	return &UserHandler_GetAll_Call{Call: _e.mock.On("GetAll", c)}
}

func (_c *UserHandler_GetAll_Call) Run(run func(c *gin.Context)) *UserHandler_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *UserHandler_GetAll_Call) Return() *UserHandler_GetAll_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserHandler_GetAll_Call) RunAndReturn(run func(*gin.Context)) *UserHandler_GetAll_Call {
	_c.Run(run)
	return _c
}

// GetByID provides a mock function with given fields: c
func (_m *UserHandler) GetByID(c *gin.Context) {
	_m.Called(c)
}

// UserHandler_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type UserHandler_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - c *gin.Context
func (_e *UserHandler_Expecter) GetByID(c interface{}) *UserHandler_GetByID_Call {
	return &UserHandler_GetByID_Call{Call: _e.mock.On("GetByID", c)}
}

func (_c *UserHandler_GetByID_Call) Run(run func(c *gin.Context)) *UserHandler_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *UserHandler_GetByID_Call) Return() *UserHandler_GetByID_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserHandler_GetByID_Call) RunAndReturn(run func(*gin.Context)) *UserHandler_GetByID_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function with given fields: c
func (_m *UserHandler) Update(c *gin.Context) {
	_m.Called(c)
}

// UserHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UserHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - c *gin.Context
func (_e *UserHandler_Expecter) Update(c interface{}) *UserHandler_Update_Call {
	return &UserHandler_Update_Call{Call: _e.mock.On("Update", c)}
}

func (_c *UserHandler_Update_Call) Run(run func(c *gin.Context)) *UserHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *UserHandler_Update_Call) Return() *UserHandler_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserHandler_Update_Call) RunAndReturn(run func(*gin.Context)) *UserHandler_Update_Call {
	_c.Run(run)
	return _c
}

// NewUserHandler creates a new instance of UserHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserHandler {
	mock := &UserHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
