// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// ClaimHandler is an autogenerated mock type for the ClaimHandler type
type ClaimHandler struct {
	mock.Mock
}

type ClaimHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *ClaimHandler) EXPECT() *ClaimHandler_Expecter {
	return &ClaimHandler_Expecter{mock: &_m.Mock}
}

// Cancel provides a mock function with given fields: c
func (_m *ClaimHandler) Cancel(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_Cancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cancel'
type ClaimHandler_Cancel_Call struct {
	*mock.Call
}

// Cancel is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) Cancel(c interface{}) *ClaimHandler_Cancel_Call {
	return &ClaimHandler_Cancel_Call{Call: _e.mock.On("Cancel", c)}
}

func (_c *ClaimHandler_Cancel_Call) Run(run func(c *gin.Context)) *ClaimHandler_Cancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_Cancel_Call) Return() *ClaimHandler_Cancel_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_Cancel_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_Cancel_Call {
	_c.Run(run)
	return _c
}

// Complete provides a mock function with given fields: c
func (_m *ClaimHandler) Complete(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type ClaimHandler_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) Complete(c interface{}) *ClaimHandler_Complete_Call {
	return &ClaimHandler_Complete_Call{Call: _e.mock.On("Complete", c)}
}

func (_c *ClaimHandler_Complete_Call) Run(run func(c *gin.Context)) *ClaimHandler_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_Complete_Call) Return() *ClaimHandler_Complete_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_Complete_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_Complete_Call {
	_c.Run(run)
	return _c
}

// Create provides a mock function with given fields: c
func (_m *ClaimHandler) Create(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ClaimHandler_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) Create(c interface{}) *ClaimHandler_Create_Call {
	return &ClaimHandler_Create_Call{Call: _e.mock.On("Create", c)}
}

func (_c *ClaimHandler_Create_Call) Run(run func(c *gin.Context)) *ClaimHandler_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_Create_Call) Return() *ClaimHandler_Create_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_Create_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_Create_Call {
	_c.Run(run)
	return _c
}

// Delete provides a mock function with given fields: c
func (_m *ClaimHandler) Delete(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ClaimHandler_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) Delete(c interface{}) *ClaimHandler_Delete_Call {
	return &ClaimHandler_Delete_Call{Call: _e.mock.On("Delete", c)}
}

func (_c *ClaimHandler_Delete_Call) Run(run func(c *gin.Context)) *ClaimHandler_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_Delete_Call) Return() *ClaimHandler_Delete_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_Delete_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_Delete_Call {
	_c.Run(run)
	return _c
}

// GetAll provides a mock function with given fields: c
func (_m *ClaimHandler) GetAll(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ClaimHandler_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) GetAll(c interface{}) *ClaimHandler_GetAll_Call {
	return &ClaimHandler_GetAll_Call{Call: _e.mock.On("GetAll", c)}
}

func (_c *ClaimHandler_GetAll_Call) Run(run func(c *gin.Context)) *ClaimHandler_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_GetAll_Call) Return() *ClaimHandler_GetAll_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_GetAll_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_GetAll_Call {
	_c.Run(run)
	return _c
}

// GetByID provides a mock function with given fields: c
func (_m *ClaimHandler) GetByID(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ClaimHandler_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) GetByID(c interface{}) *ClaimHandler_GetByID_Call {
	return &ClaimHandler_GetByID_Call{Call: _e.mock.On("GetByID", c)}
}

func (_c *ClaimHandler_GetByID_Call) Run(run func(c *gin.Context)) *ClaimHandler_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_GetByID_Call) Return() *ClaimHandler_GetByID_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_GetByID_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_GetByID_Call {
	_c.Run(run)
	return _c
}

// History provides a mock function with given fields: c
func (_m *ClaimHandler) History(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_History_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'History'
type ClaimHandler_History_Call struct {
	*mock.Call
}

// History is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) History(c interface{}) *ClaimHandler_History_Call {
	return &ClaimHandler_History_Call{Call: _e.mock.On("History", c)}
}

func (_c *ClaimHandler_History_Call) Run(run func(c *gin.Context)) *ClaimHandler_History_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_History_Call) Return() *ClaimHandler_History_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_History_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_History_Call {
	_c.Run(run)
	return _c
}

// RequestInformation provides a mock function with given fields: c
func (_m *ClaimHandler) RequestInformation(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_RequestInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestInformation'
type ClaimHandler_RequestInformation_Call struct {
	*mock.Call
}

// RequestInformation is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) RequestInformation(c interface{}) *ClaimHandler_RequestInformation_Call {
	return &ClaimHandler_RequestInformation_Call{Call: _e.mock.On("RequestInformation", c)}
}

func (_c *ClaimHandler_RequestInformation_Call) Run(run func(c *gin.Context)) *ClaimHandler_RequestInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_RequestInformation_Call) Return() *ClaimHandler_RequestInformation_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_RequestInformation_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_RequestInformation_Call {
	_c.Run(run)
	return _c
}

// Review provides a mock function with given fields: c
func (_m *ClaimHandler) Review(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_Review_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Review'
type ClaimHandler_Review_Call struct {
	*mock.Call
}

// Review is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) Review(c interface{}) *ClaimHandler_Review_Call {
	return &ClaimHandler_Review_Call{Call: _e.mock.On("Review", c)}
}

func (_c *ClaimHandler_Review_Call) Run(run func(c *gin.Context)) *ClaimHandler_Review_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_Review_Call) Return() *ClaimHandler_Review_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_Review_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_Review_Call {
	_c.Run(run)
	return _c
}

// Submit provides a mock function with given fields: c
func (_m *ClaimHandler) Submit(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_Submit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Submit'
type ClaimHandler_Submit_Call struct {
	*mock.Call
}

// Submit is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) Submit(c interface{}) *ClaimHandler_Submit_Call {
	return &ClaimHandler_Submit_Call{Call: _e.mock.On("Submit", c)}
}

func (_c *ClaimHandler_Submit_Call) Run(run func(c *gin.Context)) *ClaimHandler_Submit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_Submit_Call) Return() *ClaimHandler_Submit_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_Submit_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_Submit_Call {
	_c.Run(run)
	return _c
}

// Update provides a mock function with given fields: c
func (_m *ClaimHandler) Update(c *gin.Context) {
	_m.Called(c)
}

// ClaimHandler_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ClaimHandler_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - c *gin.Context
func (_e *ClaimHandler_Expecter) Update(c interface{}) *ClaimHandler_Update_Call {
	return &ClaimHandler_Update_Call{Call: _e.mock.On("Update", c)}
}

func (_c *ClaimHandler_Update_Call) Run(run func(c *gin.Context)) *ClaimHandler_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *ClaimHandler_Update_Call) Return() *ClaimHandler_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *ClaimHandler_Update_Call) RunAndReturn(run func(*gin.Context)) *ClaimHandler_Update_Call {
	_c.Run(run)
	return _c
}

// NewClaimHandler creates a new instance of ClaimHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClaimHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClaimHandler {
	mock := &ClaimHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
