// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	multipart "mime/multipart"

	mock "github.com/stretchr/testify/mock"
)

// CloudinaryService is an autogenerated mock type for the CloudinaryService type
type CloudinaryService struct {
	mock.Mock
}

// DeleteFile provides a mock function with given fields: ctx, publicID, resourceType
func (_m *CloudinaryService) DeleteFile(ctx context.Context, publicID string, resourceType string) error {
	ret := _m.Called(ctx, publicID, resourceType)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, publicID, resourceType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteFileByURL provides a mock function with given fields: ctx, fileURL
func (_m *CloudinaryService) DeleteFileByURL(ctx context.Context, fileURL string) error {
	ret := _m.Called(ctx, fileURL)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFileByURL")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fileURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadFile provides a mock function with given fields: ctx, file, resourceType
func (_m *CloudinaryService) UploadFile(ctx context.Context, file multipart.File, resourceType string) (string, error) {
	ret := _m.Called(ctx, file, resourceType)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, multipart.File, string) (string, error)); ok {
		return rf(ctx, file, resourceType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, multipart.File, string) string); ok {
		r0 = rf(ctx, file, resourceType)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, multipart.File, string) error); ok {
		r1 = rf(ctx, file, resourceType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCloudinaryService creates a new instance of CloudinaryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCloudinaryService(t interface {
	mock.TestingT
	Cleanup(func())
}) *CloudinaryService {
	mock := &CloudinaryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
