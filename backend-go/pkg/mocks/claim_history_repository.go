// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	application "ev-warranty-go/internal/application"

	entities "ev-warranty-go/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	time "time"

	uuid "github.com/google/uuid"
)

// ClaimHistoryRepository is an autogenerated mock type for the ClaimHistoryRepository type
type ClaimHistoryRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, history
func (_m *ClaimHistoryRepository) Create(tx application.Tx, history *entities.ClaimHistory) error {
	ret := _m.Called(tx, history)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, *entities.ClaimHistory) error); ok {
		r0 = rf(tx, history)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByClaimID provides a mock function with given fields: ctx, claimID
func (_m *ClaimHistoryRepository) FindByClaimID(ctx context.Context, claimID uuid.UUID) ([]*entities.ClaimHistory, error) {
	ret := _m.Called(ctx, claimID)

	if len(ret) == 0 {
		panic("no return value specified for FindByClaimID")
	}

	var r0 []*entities.ClaimHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entities.ClaimHistory, error)); ok {
		return rf(ctx, claimID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entities.ClaimHistory); ok {
		r0 = rf(ctx, claimID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ClaimHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, claimID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByDateRange provides a mock function with given fields: ctx, claimID, startDate, endDate
func (_m *ClaimHistoryRepository) FindByDateRange(ctx context.Context, claimID uuid.UUID, startDate time.Time, endDate time.Time) ([]*entities.ClaimHistory, error) {
	ret := _m.Called(ctx, claimID, startDate, endDate)

	if len(ret) == 0 {
		panic("no return value specified for FindByDateRange")
	}

	var r0 []*entities.ClaimHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) ([]*entities.ClaimHistory, error)); ok {
		return rf(ctx, claimID, startDate, endDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, time.Time, time.Time) []*entities.ClaimHistory); ok {
		r0 = rf(ctx, claimID, startDate, endDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ClaimHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, time.Time, time.Time) error); ok {
		r1 = rf(ctx, claimID, startDate, endDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindLatestByClaimID provides a mock function with given fields: ctx, claimID
func (_m *ClaimHistoryRepository) FindLatestByClaimID(ctx context.Context, claimID uuid.UUID) (*entities.ClaimHistory, error) {
	ret := _m.Called(ctx, claimID)

	if len(ret) == 0 {
		panic("no return value specified for FindLatestByClaimID")
	}

	var r0 *entities.ClaimHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.ClaimHistory, error)); ok {
		return rf(ctx, claimID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.ClaimHistory); ok {
		r0 = rf(ctx, claimID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ClaimHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, claimID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDeleteByClaimID provides a mock function with given fields: tx, claimID
func (_m *ClaimHistoryRepository) SoftDeleteByClaimID(tx application.Tx, claimID uuid.UUID) error {
	ret := _m.Called(tx, claimID)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteByClaimID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID) error); ok {
		r0 = rf(tx, claimID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClaimHistoryRepository creates a new instance of ClaimHistoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClaimHistoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClaimHistoryRepository {
	mock := &ClaimHistoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
