// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	application "ev-warranty-go/internal/application"

	entities "ev-warranty-go/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	repositories "ev-warranty-go/internal/application/repositories"

	uuid "github.com/google/uuid"
)

// ClaimRepository is an autogenerated mock type for the ClaimRepository type
type ClaimRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: tx, claim
func (_m *ClaimRepository) Create(tx application.Tx, claim *entities.Claim) error {
	ret := _m.Called(tx, claim)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, *entities.Claim) error); ok {
		r0 = rf(tx, claim)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, filters, pagination
func (_m *ClaimRepository) FindAll(ctx context.Context, filters repositories.ClaimFilters, pagination repositories.Pagination) ([]*entities.Claim, int64, error) {
	ret := _m.Called(ctx, filters, pagination)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*entities.Claim
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, repositories.ClaimFilters, repositories.Pagination) ([]*entities.Claim, int64, error)); ok {
		return rf(ctx, filters, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repositories.ClaimFilters, repositories.Pagination) []*entities.Claim); ok {
		r0 = rf(ctx, filters, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Claim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repositories.ClaimFilters, repositories.Pagination) int64); ok {
		r1 = rf(ctx, filters, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, repositories.ClaimFilters, repositories.Pagination) error); ok {
		r2 = rf(ctx, filters, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// FindByCustomerID provides a mock function with given fields: ctx, customerID
func (_m *ClaimRepository) FindByCustomerID(ctx context.Context, customerID uuid.UUID) ([]*entities.Claim, error) {
	ret := _m.Called(ctx, customerID)

	if len(ret) == 0 {
		panic("no return value specified for FindByCustomerID")
	}

	var r0 []*entities.Claim
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entities.Claim, error)); ok {
		return rf(ctx, customerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entities.Claim); ok {
		r0 = rf(ctx, customerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Claim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, customerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ClaimRepository) FindByID(ctx context.Context, id uuid.UUID) (*entities.Claim, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.Claim
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.Claim, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Claim); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Claim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByVehicleID provides a mock function with given fields: ctx, vehicleID
func (_m *ClaimRepository) FindByVehicleID(ctx context.Context, vehicleID uuid.UUID) ([]*entities.Claim, error) {
	ret := _m.Called(ctx, vehicleID)

	if len(ret) == 0 {
		panic("no return value specified for FindByVehicleID")
	}

	var r0 []*entities.Claim
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entities.Claim, error)); ok {
		return rf(ctx, vehicleID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entities.Claim); ok {
		r0 = rf(ctx, vehicleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Claim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, vehicleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HardDelete provides a mock function with given fields: tx, id
func (_m *ClaimRepository) HardDelete(tx application.Tx, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for HardDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SoftDelete provides a mock function with given fields: tx, id
func (_m *ClaimRepository) SoftDelete(tx application.Tx, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: tx, claim
func (_m *ClaimRepository) Update(tx application.Tx, claim *entities.Claim) error {
	ret := _m.Called(tx, claim)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, *entities.Claim) error); ok {
		r0 = rf(tx, claim)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: tx, id, status
func (_m *ClaimRepository) UpdateStatus(tx application.Tx, id uuid.UUID, status string) error {
	ret := _m.Called(tx, id, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, string) error); ok {
		r0 = rf(tx, id, status)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClaimRepository creates a new instance of ClaimRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClaimRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClaimRepository {
	mock := &ClaimRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
