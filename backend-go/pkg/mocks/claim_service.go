// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	application "ev-warranty-go/internal/application"

	entities "ev-warranty-go/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	services "ev-warranty-go/internal/application/services"

	uuid "github.com/google/uuid"
)

// ClaimService is an autogenerated mock type for the ClaimService type
type ClaimService struct {
	mock.Mock
}

// Complete provides a mock function with given fields: tx, id, changedBy
func (_m *ClaimService) Complete(tx application.Tx, id uuid.UUID, changedBy uuid.UUID) error {
	ret := _m.Called(tx, id, changedBy)

	if len(ret) == 0 {
		panic("no return value specified for Complete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(tx, id, changedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: tx, cmd
func (_m *ClaimService) Create(tx application.Tx, cmd *services.CreateClaimCommand) (*entities.Claim, error) {
	ret := _m.Called(tx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.Claim
	var r1 error
	if rf, ok := ret.Get(0).(func(application.Tx, *services.CreateClaimCommand) (*entities.Claim, error)); ok {
		return rf(tx, cmd)
	}
	if rf, ok := ret.Get(0).(func(application.Tx, *services.CreateClaimCommand) *entities.Claim); ok {
		r0 = rf(tx, cmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Claim)
		}
	}

	if rf, ok := ret.Get(1).(func(application.Tx, *services.CreateClaimCommand) error); ok {
		r1 = rf(tx, cmd)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: tx, id
func (_m *ClaimService) Delete(tx application.Tx, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, filters, pagination
func (_m *ClaimService) GetAll(ctx context.Context, filters services.ClaimFilters, pagination services.Pagination) (*services.ClaimListResult, error) {
	ret := _m.Called(ctx, filters, pagination)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 *services.ClaimListResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, services.ClaimFilters, services.Pagination) (*services.ClaimListResult, error)); ok {
		return rf(ctx, filters, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, services.ClaimFilters, services.Pagination) *services.ClaimListResult); ok {
		r0 = rf(ctx, filters, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*services.ClaimListResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, services.ClaimFilters, services.Pagination) error); ok {
		r1 = rf(ctx, filters, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *ClaimService) GetByID(ctx context.Context, id uuid.UUID) (*entities.Claim, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *entities.Claim
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.Claim, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.Claim); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Claim)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistory provides a mock function with given fields: ctx, claimID
func (_m *ClaimService) GetHistory(ctx context.Context, claimID uuid.UUID) ([]*entities.ClaimHistory, error) {
	ret := _m.Called(ctx, claimID)

	if len(ret) == 0 {
		panic("no return value specified for GetHistory")
	}

	var r0 []*entities.ClaimHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entities.ClaimHistory, error)); ok {
		return rf(ctx, claimID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entities.ClaimHistory); ok {
		r0 = rf(ctx, claimID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ClaimHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, claimID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Submit provides a mock function with given fields: tx, id, changedBy
func (_m *ClaimService) Submit(tx application.Tx, id uuid.UUID, changedBy uuid.UUID) error {
	ret := _m.Called(tx, id, changedBy)

	if len(ret) == 0 {
		panic("no return value specified for Submit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(tx, id, changedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: tx, id, cmd
func (_m *ClaimService) Update(tx application.Tx, id uuid.UUID, cmd *services.UpdateClaimCommand) error {
	ret := _m.Called(tx, id, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, *services.UpdateClaimCommand) error); ok {
		r0 = rf(tx, id, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateStatus provides a mock function with given fields: tx, id, status, changedBy
func (_m *ClaimService) UpdateStatus(tx application.Tx, id uuid.UUID, status string, changedBy uuid.UUID) error {
	ret := _m.Called(tx, id, status, changedBy)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID, string, uuid.UUID) error); ok {
		r0 = rf(tx, id, status, changedBy)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClaimService creates a new instance of ClaimService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClaimService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClaimService {
	mock := &ClaimService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
