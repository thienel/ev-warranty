// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// OAuthHandler is an autogenerated mock type for the OAuthHandler type
type OAuthHandler struct {
	mock.Mock
}

type OAuthHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *OAuthHandler) EXPECT() *OAuthHandler_Expecter {
	return &OAuthHandler_Expecter{mock: &_m.Mock}
}

// HandleCallback provides a mock function with given fields: c
func (_m *OAuthHandler) HandleCallback(c *gin.Context) {
	_m.Called(c)
}

// OAuthHandler_HandleCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleCallback'
type OAuthHandler_HandleCallback_Call struct {
	*mock.Call
}

// HandleCallback is a helper method to define mock.On call
//   - c *gin.Context
func (_e *OAuthHandler_Expecter) HandleCallback(c interface{}) *OAuthHandler_HandleCallback_Call {
	return &OAuthHandler_HandleCallback_Call{Call: _e.mock.On("HandleCallback", c)}
}

func (_c *OAuthHandler_HandleCallback_Call) Run(run func(c *gin.Context)) *OAuthHandler_HandleCallback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *OAuthHandler_HandleCallback_Call) Return() *OAuthHandler_HandleCallback_Call {
	_c.Call.Return()
	return _c
}

func (_c *OAuthHandler_HandleCallback_Call) RunAndReturn(run func(*gin.Context)) *OAuthHandler_HandleCallback_Call {
	_c.Run(run)
	return _c
}

// InitiateOAuth provides a mock function with given fields: c
func (_m *OAuthHandler) InitiateOAuth(c *gin.Context) {
	_m.Called(c)
}

// OAuthHandler_InitiateOAuth_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitiateOAuth'
type OAuthHandler_InitiateOAuth_Call struct {
	*mock.Call
}

// InitiateOAuth is a helper method to define mock.On call
//   - c *gin.Context
func (_e *OAuthHandler_Expecter) InitiateOAuth(c interface{}) *OAuthHandler_InitiateOAuth_Call {
	return &OAuthHandler_InitiateOAuth_Call{Call: _e.mock.On("InitiateOAuth", c)}
}

func (_c *OAuthHandler_InitiateOAuth_Call) Run(run func(c *gin.Context)) *OAuthHandler_InitiateOAuth_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *OAuthHandler_InitiateOAuth_Call) Return() *OAuthHandler_InitiateOAuth_Call {
	_c.Call.Return()
	return _c
}

func (_c *OAuthHandler_InitiateOAuth_Call) RunAndReturn(run func(*gin.Context)) *OAuthHandler_InitiateOAuth_Call {
	_c.Run(run)
	return _c
}

// NewOAuthHandler creates a new instance of OAuthHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOAuthHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *OAuthHandler {
	mock := &OAuthHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
