// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	application "ev-warranty-go/internal/application"

	entities "ev-warranty-go/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ClaimAttachmentRepository is an autogenerated mock type for the ClaimAttachmentRepository type
type ClaimAttachmentRepository struct {
	mock.Mock
}

// CountByClaimID provides a mock function with given fields: ctx, claimID
func (_m *ClaimAttachmentRepository) CountByClaimID(ctx context.Context, claimID uuid.UUID) (int64, error) {
	ret := _m.Called(ctx, claimID)

	if len(ret) == 0 {
		panic("no return value specified for CountByClaimID")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int64, error)); ok {
		return rf(ctx, claimID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int64); ok {
		r0 = rf(ctx, claimID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, claimID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: tx, attachment
func (_m *ClaimAttachmentRepository) Create(tx application.Tx, attachment *entities.ClaimAttachment) error {
	ret := _m.Called(tx, attachment)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, *entities.ClaimAttachment) error); ok {
		r0 = rf(tx, attachment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByClaimID provides a mock function with given fields: ctx, claimID
func (_m *ClaimAttachmentRepository) FindByClaimID(ctx context.Context, claimID uuid.UUID) ([]*entities.ClaimAttachment, error) {
	ret := _m.Called(ctx, claimID)

	if len(ret) == 0 {
		panic("no return value specified for FindByClaimID")
	}

	var r0 []*entities.ClaimAttachment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]*entities.ClaimAttachment, error)); ok {
		return rf(ctx, claimID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []*entities.ClaimAttachment); ok {
		r0 = rf(ctx, claimID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ClaimAttachment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, claimID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ClaimAttachmentRepository) FindByID(ctx context.Context, id uuid.UUID) (*entities.ClaimAttachment, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *entities.ClaimAttachment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*entities.ClaimAttachment, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entities.ClaimAttachment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.ClaimAttachment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByType provides a mock function with given fields: ctx, claimID, attachmentType
func (_m *ClaimAttachmentRepository) FindByType(ctx context.Context, claimID uuid.UUID, attachmentType string) ([]*entities.ClaimAttachment, error) {
	ret := _m.Called(ctx, claimID, attachmentType)

	if len(ret) == 0 {
		panic("no return value specified for FindByType")
	}

	var r0 []*entities.ClaimAttachment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) ([]*entities.ClaimAttachment, error)); ok {
		return rf(ctx, claimID, attachmentType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) []*entities.ClaimAttachment); ok {
		r0 = rf(ctx, claimID, attachmentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.ClaimAttachment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, claimID, attachmentType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HardDelete provides a mock function with given fields: tx, id
func (_m *ClaimAttachmentRepository) HardDelete(tx application.Tx, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for HardDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SoftDeleteByClaimID provides a mock function with given fields: tx, id
func (_m *ClaimAttachmentRepository) SoftDeleteByClaimID(tx application.Tx, id uuid.UUID) error {
	ret := _m.Called(tx, id)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteByClaimID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(application.Tx, uuid.UUID) error); ok {
		r0 = rf(tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewClaimAttachmentRepository creates a new instance of ClaimAttachmentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClaimAttachmentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ClaimAttachmentRepository {
	mock := &ClaimAttachmentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
